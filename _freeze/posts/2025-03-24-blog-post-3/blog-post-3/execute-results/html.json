{
  "hash": "5cd8e80bbd8d61d5dd22764e7fb81a11",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Blog Post 3\"\nsubtitle: \"Data Loading/Cleaning\"\ndescription:  |\n  This is Data Detectives' third blog post where we further investigate, load,\n  and clean our initial dataset.\nauthor: \"Data Detectives\"\ndate: \"2025-03-24\"\ndate-modified: \"2025-03-24\"\ndraft: FALSE\n---\n\n\n  \n## Data Cleaning\n\nHere are some basic figures we created after cleaning, these are meant to show a quick breakdown of some of the variables we cleaned. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nnls_data_clean <- read_rds(\"dataset/nls_clean.rds\")\n\n#count of races that participated \nggplot(nls_data_clean, aes(x = Race, fill = Sex)) +\n  geom_bar(position = \"dodge\") +\n  labs(title = \"Participant Count by Race and Sex\", x = \"Race\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](blog-post-3_files/figure-html/datacleaning-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#count of different marital statuses found in survey\nggplot(nls_data_clean, aes(x = Marital_Status)) +\n  geom_bar(fill = \"orchid\") +\n  labs(title = \"Marital Status Distribution\", x = \"Marital Status\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](blog-post-3_files/figure-html/datacleaning-2.png){width=672}\n:::\n:::\n\n\n\nOur data set required significant cleaning. In order to work with our CSV file, we needed to decode the integers that served as placeholders for column names, remove \"non-interview\" data points that we can't compare across years, and decode integer values representing race, grade, etc. For this process, we primarily depended on the tidyverse library and other methods discussed in lecture. \n\nTo begin with, working with integer-coded columns would have been incredibly difficult. To combat this issue, we created began with gathering all the integer codes and their String equivalents. Next, we created R scripts to rename all our selected columns based on their integer codes.  Our next task was removing non-interview values. These rows, indicated by -5 values, imply that the interviewee either quit or was removed from the data sampling. Therefore, they may be included in earlier years and not in late years. To improve our modeling, we must remove these values. \n\nAnother challenge was modifying actual data points in every row. For example, rather than listing a respondents race, the information is coded in integers (i.e. 1 = \"black\", 2 = \"white\", etc.) This would be incredibly difficult to keep track of in the long term scope of our project, therefore, we decided to modify these values. Columns race, sex, highest grade completed, and marital status were all encoded using this style. Consequently, we used similar R scripts to decode all of these columns. \n\nNow that our initial dataset is clean we plan to create more visuals to analyze this set, determine our next dataset to combine with this one, choose which additional data from this source to include (and clean of course). \n\n\n",
    "supporting": [
      "blog-post-3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}