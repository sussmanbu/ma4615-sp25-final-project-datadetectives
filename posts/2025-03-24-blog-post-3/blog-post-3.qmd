---
title: "Blog Post 3"
subtitle: "Data Loading/Cleaning"
description:  |
  This is Data Detectives' third blog post where we further investigate, load,
  and clean our initial dataset.
author: "Data Detectives"
date: "2025-03-24"
date-modified: "2025-03-24"
draft: FALSE
---
## Data Cleaning

TODO:  Use figures or tables to help explain the data. For example, showing a histogram or bar chart for a particularly important variable can provide a quick overview of the values that variable tends to take.
TODO: link clean_data.R in placeholder

Our data set required significant cleaning. In order to work with our CSV file, we needed to decode the integers that served as placeholders for column names, remove "non-interview" data points that we can't compare across years, and decode integer values representing race, grade, etc. All the R scripts we used to load and clean the data can be found [here](https://www.bls.gov/nls/nlsy79.htm). For this process, we primarily depended on the tidyverse library and other methods discussed in lecture. 

To begin with, working with integer-coded columns would have been incredibly difficult. To combat this issue, we created began with gathering all the integer codes and their String equivalents. Next, we created R scripts to rename all our selected columns based on their integer codes.  

The script is in our clean_data.R as follows: 

```{r c1}
  # Load Data with Explicit Column Types
nls_data <- read_csv(
  here("dataset", "nls_initial_data_updated.csv"),
  col_types = cols(
    R0000100 = col_integer(),   # Case ID
    R0173600 = col_integer(),   # Sample ID
    R0214700 = col_integer(),   # Race
    R0214800 = col_integer(),   # Sex
    T2272800 = col_integer(),   # Highest Grade Completed
    T3045300 = col_double(),    # Total Income
    T3108400 = col_integer(),   # Marital Status
    T3108700 = col_integer()    # Age
  )
) %>%

  # Convert categorical variables to factors
  mutate(across(c(Race, Sex, Highest_Grade_Completed, Marital_Status), as.factor)) %>%
  # Remove original numeric columns
  select(-c(R0214700, R0214800, T2272800, T3108400)) %>%
  # Rename columns
  rename(
    Case_ID = R0000100,
    Sample_ID = R0173600,
    Total_Income_Prev_Year = T3045300,
    Age_2010 = T3108700
  )

```

Our next task was removing non-interview values. These rows, indicated by -5 values, imply that the interviewee either quit or was removed from the data sampling. Therefore, they may be included in earlier years and not in late years. To improve our modeling, we must remove these values. 

In doing so, we discovered other null values that required further debugging and cleaning. The R script to do both these tasks is as follows:
```{r c2}
### REMOVE non-interviews(-5)
  # Remove rows where any variable is -5
  filter(if_all(everything(), ~ . != -5))
# Debugging Step: Check if `nls_data` is created
print("nls_data successfully loaded and filtered.")
print(dim(nls_data))

# Handle Missing Data and Negative Income
nls_data <- nls_data %>%
  mutate(
    T3045300 = na_if(T3045300, -1),  # Mark -1 as NA
    T3045300 = ifelse(T3045300 < 0, NA, T3045300)  # Negative income to NA
  )

```

Another challenge was modifying actual data points in every row. For example, rather than listing a respondents race, the information is coded in integers (i.e. 1 = "black", 2 = "white", etc.) This would be incredibly difficult to keep track of in the long term scope of our project, therefore, we decided to modify these values. 

Columns race, sex, highest grade completed, and marital status were all encoded using this style. Consequently, we used similar R scripts to decode all of these columns. The R script to do so is as follows: 
```{r c3}
 # Create Cleaned Dataset
nls_data_clean <- nls_data %>%
  mutate(
    Race = case_when(
      R0214700 == 1 ~ "Hispanic",
      R0214700 == 2 ~ "Black",
      R0214700 == 3 ~ "Non-Black/Non-Hispanic",
      TRUE ~ NA_character_
    ),
    Sex = case_when(
      R0214800 == 1 ~ "Male",
      R0214800 == 2 ~ "Female",
      TRUE ~ NA_character_
    ),
      Highest_Grade_Completed = case_when(
        T2272800 == 1 ~ "1ST GRADE", 
        T2272800 == 2 ~ "2ND GRADE", 
        T2272800 == 3 ~ "3RD GRADE",
        T2272800 == 4 ~ "4TH GRADE", 
        T2272800 == 5 ~ "5TH GRADE", 
        T2272800 == 6 ~ "6TH GRADE", 
        T2272800 == 7 ~ "7TH GRADE", 
        T2272800 == 8 ~ "8TH GRADE", 
        T2272800 == 9 ~ "9TH GRADE", 
        T2272800 == 10 ~ "10TH GRADE", 
        T2272800 == 11 ~ "11TH GRADE", 
        T2272800 == 12 ~ "12TH GRADE", 
        T2272800 == 13 ~ "1ST YEAR COLLEGE", 
        T2272800 == 14 ~ "2ND YEAR COLLEGE", 
        T2272800 == 15 ~ "3RD YEAR COLLEGE", 
        T2272800 == 16 ~ "4TH YEAR COLLEGE", 
        T2272800 == 17 ~ "5TH YEAR COLLEGE", 
        T2272800 == 18 ~ "6TH YEAR COLLEGE", 
        T2272800 == 19 ~ "7TH YEAR COLLEGE", 
        T2272800 == 20 ~ "8TH YEAR COLLEGE OR MORE", 
        T2272800 == 95 ~ "UNGRADED",
        TRUE ~ NA_character_
      ),
  Marital_Status = case_when(
      T3108400 == 0 ~ "Never Married",
      T3108400 == 1 ~ "Married",
      T3108400 == 2 ~ "Separated",
      T3108400 == 3 ~ "Divorced",
      T3108400 == 6 ~ "Widowed",
      TRUE ~ NA_character_
    )
  ) %>%
  # Convert categorical variables to factors
  mutate(across(c(Race, Sex, Highest_Grade_Completed, Marital_Status), as.factor)) %>%
  # Remove original numeric columns
  select(-c(R0214700, R0214800, T2272800, T3108400)) %>%
  # Rename columns
  rename(
    Case_ID = R0000100,
    Sample_ID = R0173600,
    Total_Income_Prev_Year = T3045300,
    Age_2010 = T3108700
  )
```

